/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [3-1:0] M_seg_sel;
  reg [12-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [4-1:0] M_myCount_value;
  slowCount_3 myCount (
    .clk(clk),
    .rst(rst),
    .value(M_myCount_value)
  );
  localparam MANUAL_state = 1'd0;
  localparam AUTO_state = 1'd1;
  
  reg M_state_d, M_state_q = MANUAL_state;
  
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_4 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .alu(M_alu_alu),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [6-1:0] M_acnt_alufn;
  reg [4-1:0] M_acnt_count;
  alufn_count_5 acnt (
    .count(M_acnt_count),
    .alufn(M_acnt_alufn)
  );
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [5:0] alufn;
  
  reg [15:0] error;
  
  reg [5:0] alufn_err;
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_seg_values = 12'h000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    io_led = 24'h000000;
    io_led[16+7+0-:1] = io_dip[16+7+0-:1];
    led[0+0-:1] = M_alu_z;
    led[3+0-:1] = M_alu_v;
    led[6+0-:1] = M_alu_n;
    a = 16'h0000;
    b = 16'h0000;
    M_acnt_count = 4'h0;
    error = 16'h0000;
    alufn_err = 6'h00;
    if (io_dip[0+0+0-:1]) begin
      a = 16'haaaa;
      b = 16'h5555;
      M_seg_values = 12'h001;
    end else begin
      if (io_dip[0+1+0-:1]) begin
        a = 16'h0072;
        b = 16'h0013;
        M_seg_values = 12'h002;
      end else begin
        if (io_dip[0+2+0-:1]) begin
          a = 16'hfffb;
          b = 16'hfffb;
          M_seg_values = 12'h003;
        end else begin
          if (io_dip[0+3+0-:1]) begin
            a = 16'hffe5;
            b = 16'h0009;
            M_seg_values = 12'h004;
          end else begin
            if (io_dip[0+4+0-:1]) begin
              a = 16'h5555;
              b = 16'haaaa;
              M_seg_values = 12'h005;
            end
          end
        end
      end
    end
    M_alu_a = a;
    M_alu_b = b;
    M_alu_alufn = 6'h00;
    
    case (M_state_q)
      MANUAL_state: begin
        if (io_dip[16+7+0-:1]) begin
          M_state_d = AUTO_state;
        end
        io_led[16+0+5-:6] = io_dip[16+0+5-:6];
        alufn = io_dip[16+0+5-:6];
        M_alu_alufn = alufn;
        if (io_dip[8+0+0-:1]) begin
          alufn_err = alufn;
          error = M_alu_alu + 16'h5555;
          io_led[0+0+7-:8] = error[0+7-:8];
          io_led[8+0+7-:8] = error[8+7-:8];
          M_seg_values = 12'h788;
        end else begin
          io_led[0+0+7-:8] = M_alu_alu[0+7-:8];
          io_led[8+0+7-:8] = M_alu_alu[8+7-:8];
        end
      end
      AUTO_state: begin
        if (!io_dip[16+7+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        M_acnt_count = M_myCount_value;
        M_alu_alufn = M_acnt_alufn;
        io_led[16+0+5-:6] = M_acnt_alufn;
        if (io_dip[8+0+0-:1]) begin
          alufn_err = M_acnt_alufn;
          error = M_alu_alu + 16'h5555;
          io_led[0+0+7-:8] = error[0+7-:8];
          io_led[8+0+7-:8] = error[8+7-:8];
          M_seg_values = 12'h788;
        end else begin
          io_led[0+0+7-:8] = M_alu_alu[0+7-:8];
          io_led[8+0+7-:8] = M_alu_alu[8+7-:8];
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
